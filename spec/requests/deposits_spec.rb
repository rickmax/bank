 require 'rails_helper'
 require_relative '../support/controller_macros'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/deposits", type: :request do

  before(:all) do
    @user1 = create(:user)
    @user2 = create(:user)
    @account1 = create(:account)
    @account2 = create(:account)
  end
  # Bank. As you add validations to Bank, be sure to
  # adjust the attributes here as well.

  let(:valid_session) { {} }

  let(:valid_session) { {"warden.user.user.key" => session["warden.user.user.key"]} }

  let(:valid_attributes) {
    {amount: 'bank1', city_id: @city.id}
  }

  let(:invalid_attributes) {
    {name: 'bank1'}
  }

  describe "GET /index" do
    it "renders a successful response" do
      Bank.create! valid_attributes
      sign_in @user
      get banks_url
      expect(response).to have_http_status(200)
    end

    it "include banks response" do
      banks = create_list(:bank, 5)
      sign_in @user
      get banks_url
      banks.each do |bank|
        expect(response.body).to include(bank.name)
      end
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      bank = Bank.create! valid_attributes
      sign_in @user
      get bank_url(bank)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      sign_in @user
      @states = State.all
      get new_bank_url(@bank)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Bank" do
        sign_in @user
        expect {
          post banks_url, params: { bank: {name: 'bank1', city_id: @city.id} }
        }.to change(Bank, :count).by(1)
      end

      it "redirects to the created bank" do
        sign_in @user
        post banks_url, params: { bank: {name: 'bank1', city_id: @city.id} }
        expect(response).to redirect_to(bank_url(Bank.last))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: 'bank2', city_id: @city.id }
      }

      it "updates the requested bank" do
        sign_in @user
        bank = Bank.create! valid_attributes
        patch bank_url(bank), params: { bank: new_attributes }
        bank.reload
        expect(bank).to have_attributes(:name => "bank2")
      end

      it "redirects to the bank" do
        sign_in @user
        bank = Bank.create! valid_attributes
        patch bank_url(bank), params: { bank: new_attributes }
        bank.reload
        expect(response).to redirect_to(bank_url(bank))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested bank" do
      sign_in @user
      bank = Bank.create! valid_attributes
      expect {
        delete bank_url(bank)
      }.to change(Bank, :count).by(-1)
    end

    it "redirects to the banks list" do
      sign_in @user
      bank = Bank.create! valid_attributes
      delete bank_url(bank)
      expect(response).to redirect_to(banks_url)
    end
  end
end
