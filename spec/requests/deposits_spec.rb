 require 'rails_helper'
 require_relative '../support/controller_macros'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/deposits", type: :request do

  before(:all) do
    @user1 = create(:user)
    @user2 = create(:user)
    @account1 = create(:account, user: @user1)
    @account2 = create(:account, user: @user2)
  end
  # Bank. As you add validations to Bank, be sure to
  # adjust the attributes here as well.

  let(:valid_session) { {} }

  let(:valid_session) { {"warden.user.user.key" => session["warden.user.user.key"]} }

  let(:valid_attributes) {
    {amount: 100.00, account: @user1.account}
  }

  let(:invalid_attributes) {
    {amount: nil, account: nil}
  }

  describe "GET /index" do
    it "renders a successful response" do
      Deposit.create! valid_attributes
      sign_in @user1
      get deposits_url
      expect(response).to have_http_status(200)
    end

    it "include deposits response" do
      deposits = create_list(:deposit, 5)
      sign_in @user1
      get deposits_url
      deposits.each do |deposit|
        expect(deposit).to have_attributes(:amount => 100.00)
      end
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      deposit = Deposit.create! valid_attributes
      sign_in @user1
      get deposit_url(deposit)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      sign_in @user1
      get new_deposit_url(@deposit)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new deposit" do
        sign_in @user1
        expect {
          post deposits_url, params: { deposit: {amount: 50.00} }
        }.to change(Deposit, :count).by(1)
      end

      it "redirects to the created bank" do
        sign_in @user1
        post deposits_url, params: { deposit: {amount: 100.00} }
        expect(response).to redirect_to(deposit_url(Deposit.last))
      end
    end
  end
end
